name: Build Cross-Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run type check
      run: bun run type-check

    - name: Build executables for all platforms
      run: |
        mkdir -p dist
        
        # Linux x64
        bun build index.ts --compile --outfile dist/zen-sync-linux-x64 --target bun-linux-x64
        
        # Windows x64 (Bun automatically adds .exe extension)
        bun build index.ts --compile --outfile dist/zen-sync-win32-x64 --target bun-windows-x64
        
        # macOS x64
        bun build index.ts --compile --outfile dist/zen-sync-darwin-x64 --target bun-darwin-x64
        
        # macOS ARM64
        bun build index.ts --compile --outfile dist/zen-sync-darwin-arm64 --target bun-darwin-arm64

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zen-sync-all-platforms
        path: |
          dist/zen-sync-*
          README.md
          LICENSE*
        retention-days: 30

  create-release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: zen-sync-all-platforms
        path: artifacts

    - name: Create release archives
      run: |
        cd artifacts
        
        # Create Windows ZIP
        mkdir -p zen-sync-win32-x64
        cp zen-sync-win32-x64.exe README.md LICENSE zen-sync-win32-x64/
        zip -r zen-sync-win32-x64.zip zen-sync-win32-x64/
        
        # Create Linux tar.gz
        mkdir -p zen-sync-linux-x64
        cp zen-sync-linux-x64 README.md LICENSE zen-sync-linux-x64/
        tar -czf zen-sync-linux-x64.tar.gz zen-sync-linux-x64/
        
        # Create macOS x64 tar.gz
        mkdir -p zen-sync-darwin-x64
        cp zen-sync-darwin-x64 README.md LICENSE zen-sync-darwin-x64/
        tar -czf zen-sync-darwin-x64.tar.gz zen-sync-darwin-x64/
        
        # Create macOS ARM64 tar.gz
        mkdir -p zen-sync-darwin-arm64
        cp zen-sync-darwin-arm64 README.md LICENSE zen-sync-darwin-arm64/
        tar -czf zen-sync-darwin-arm64.tar.gz zen-sync-darwin-arm64/
        
        # List created archives
        ls -la *.zip *.tar.gz

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*.zip
          artifacts/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run type check
      run: bun run type-check

    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" src/ index.ts --exclude-dir=node_modules; then
          echo "‚ö†Ô∏è Found TODO/FIXME comments"
          exit 0
        else
          echo "‚úÖ No TODO/FIXME comments found"
        fi

    - name: Check file structure
      run: |
        echo "üìÅ Project structure:"
        tree -I 'node_modules|.git|dist' || ls -la
        
        echo "üì¶ Checking required files..."
        test -f package.json && echo "‚úÖ package.json exists"
        test -f tsconfig.json && echo "‚úÖ tsconfig.json exists"
        test -f README.md && echo "‚úÖ README.md exists"
        test -f index.ts && echo "‚úÖ index.ts exists"
        test -d src && echo "‚úÖ src/ directory exists" 